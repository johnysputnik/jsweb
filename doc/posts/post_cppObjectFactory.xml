<?xml version="1.0"?>
<blog xmlns:wp="http://wordpress.org/export/1.2/" xmlns:content="http://purl.org/rss/1.0/modules/content/">

  <post>
    <title>a C++ object factory</title>
    <date>2013-01-17 14:56:46</date>
    <tag1>C++11</tag1>
    <tag2>Patterns</tag2>
    <tag3>VS2010</tag3>
    <tag4/>
    <summary>
      In object oriented programming, it is very common to have a scenario where a large
      number of classes share the same base class and the particular implementation needs
      to be created at runtime based on some specific parameters, for example a class name
      held in a string. Standard C++ does not provide the same type of
      reflection mechanism that other languages
      use to achieve this, such as C# or Java; we have to come up with another solution.
      The basic pattern, or set of patterns, that help us achieve this are factory patterns.
    </summary>
    
    <contents><![CDATA[<h2>The Problem</h2>
In object oriented programming, it is very common to have a scenario where a large
number of classes share the same base class and the particular implementation needs
to be created at runtime based on some specific parameters, for example a class name
held in a string.

Standard C++ does not provide the same type of reflection mechanism that other languages
use to achieve this, such as C# :
<pre class="prettyprint lang-cs">System.Reflection.Assembly.GetExecutingAssembly()
      .CreateInstance(string className)</pre>
or in java:
<pre class="prettyprint lang-java">Class.forName(className).getConstructor(String.class).newInstance(arg);</pre>
However, C++ does not allow us to do such things; we have to come up with another solution.
The basic pattern, or set of patterns, that help us achieve this are factory patterns.
<h2>A Simple Solution</h2>
<h3>The Base Class</h3>
Our base class is defined as an abstract class as follows:
<pre class="prettyprint lang-cpp">#ifndef CPPFACTORY_MYBASECLASS_H
#define CPPFACTORY_MYBASECLASS_H

class MyBaseClass
{
public:
    virtual ~MyBaseClass(){}
    virtual void doSomething() = 0;
};

#endif // CPPFACTORY_MYBASECLASS_H</pre>
<h3>The Factory Class</h3>
A factory method can then be defined as a static method that can be used to create
instances of MyBaseClass. We could define this as a static method on MyBaseClass
itself, although it is generally good practice in object oriented development that a class
serves a single purpose. Therefore, lets create a factory class:
<pre class="prettyprint lang-cpp">#ifndef CPPFACTORY_MYFACTORY_H
#define CPPFACTORY_MYFACTORY_H

#include &quot;MyBaseClass.h&quot;
#include &lt;memory&gt;
#include &lt;string&gt;

using namespace std;

class MyFactory
{
public:
    static shared_ptr&lt;MyBaseClass&gt; CreateInstance(string name);
};


#endif // CPPFACTORY_MYFACTORY_H</pre>
The factory method is expected to create an instance of a class named name that is derived
from MyBaseClass and return it as a shared pointer, as it will relinquish ownership
of the object to the caller.

We shall return to the implementation of the method shortly.
<h3>Some Derived Classes</h3>
So lets implement a couple of derived classes:
<pre class="prettyprint lang-cpp">#ifndef CPPFACTORY_DERIVEDCLASSONE_H
#define CPPFACTORY_DERIVEDCLASSONE_H

#include &quot;MyBaseClass.h&quot;
#include &lt;iostream&gt;
using namespace std;

class DerivedClassOne : public MyBaseClass
{
public:
    DerivedClassOne(){};
    virtual ~DerivedClassOne(){};

    virtual void doSomething() { cout &lt;&lt; &quot;I am class one&quot; &lt;&lt; endl; }
};

#endif // CPPFACTORY_DERIVEDCLASSONE_H</pre>
and
<pre class="prettyprint lang-cpp">#ifndef CPPFACTORY_DERIVEDCLASSTWO_H
#define CPPFACTORY_DERIVEDCLASSTWO_H

#include &quot;MyBaseClass.h&quot;
#include &lt;iostream&gt;
using namespace std;

class DerivedClassTwo : public MyBaseClass
{
public:
    DerivedClassTwo(){};
    virtual ~DerivedClassTwo(){};

    virtual void doSomething() { cout &lt;&lt; &quot;I am class two&quot; &lt;&lt; endl; }
};

#endif // CPPFACTORY_DERIVEDCLASSTWO_H</pre>
<h3>A First Attempt at the Factory Method</h3>
A simple solution to the implementation of the factory method would be something like
this:
<pre class="prettyprint lang-cpp">#include &quot;MyFactorySimple.h&quot;

#include &quot;DerivedClassOne.h&quot;
#include &quot;DerivedClassTwo.h&quot;

shared_ptr&lt;MyBaseClass&gt; MyFactory::CreateInstance(string name)
{
    MyBaseClass * instance = nullptr;

    if(name == &quot;one&quot;)
        instance = new DerivedClassOne();

    if(name == &quot;two&quot;)
        instance = new DerivedClassTwo();

    if(instance != nullptr)
        return std::shared_ptr&lt;MyBaseClass&gt;(instance);
    else
        return nullptr;
}</pre>
The factory determines which concrete class to create and has knowledge of every class
via the class headers.
<h3>Running the application</h3>
A simple main function is now needed so that we can test our implementation:
<pre class="prettyprint lang-cpp">#include &quot;MyFactorySimple.h&quot;

int main(int argc, char** argv)
{
    auto instanceOne = MyFactory::CreateInstance(&quot;one&quot;);
    auto instanceTwo = MyFactory::CreateInstance(&quot;two&quot;);

    instanceOne-&gt;doSomething();
    instanceTwo-&gt;doSomething();

    return 0;
}</pre>
A Visual Studio Project (SimpleFactory.vcxproj) is included with the source code accompanying
this article which can be built and run giving the following output:
<pre class="prettyprint lang-sh">I am class one
I am class two</pre>
<h2>Problems with the Simple Solution</h2>
On the surface this looks like a good solution and it possibly is in some cases. However,
what happens if we have a lot of classes deriving from MyBaseClass? We keep having
to add the includes and the compare - construct code.

The problem now is that the factory has an explicit dependency on all the derived
classes, which is not ideal. We need to come up with a better solution; one that removes
the need for constantly adding to the MyFactory::Create. This is where the idea of a
registry of factory methods can help us.
<h3>A Revised Factory Class</h3>
One of our main objectives is to remove the dependencies on the derived classes from
the factory. However, we still need to allow the factory to trigger the creation of instances.
One way to do this is for the main factory class to maintain a registry of factory
functions that can be defined elsewhere. When the factory class needs to create an instance
of a derived class, it can look up the factory function in this registry. The registry
is defined as follows:
<pre class="prettyprint lang-cpp">map&lt;string, function&lt;MyBaseClass*(void)&gt;&gt; factoryFunctionRegistry;</pre>
It is a map, keyed on a string with values as functions that return a pointer to an instance
of a class based on MyBaseClass.

We can then have a method on MyFactory which can add a factory function to the registry:
<pre class="prettyprint lang-cpp">void MyFactory::RegisterFactoryFunction(string name,
function&lt;MyBaseClass*(void)&gt; classFactoryFunction)
{
    // register the class factory function
    factoryFunctionRegistry[name] = classFactoryFunction;
}</pre>
The Create method can then be changed as follows:
<pre class="prettyprint lang-cpp">shared_ptr&lt;MyBaseClass&gt; MyFactory::Create(string name)
{
    MyBaseClass * instance = nullptr;

    // find name in the registry and call factory method.
    auto it = factoryFunctionRegistry.find(name);
    if(it != factoryFunctionRegistry.end())
        instance = it-&gt;second();

    // wrap instance in a shared ptr and return
    if(instance != nullptr)
        return std::shared_ptr&lt;MyBaseClass&gt;(instance);
    else
        return nullptr;
}</pre>
So how do we go about registering the classes in a way that keeps dependencies to a
minimum? We cannot easily have instances of the derived classes register themselves
as we can't create instances without the class being registered. The fact that we need the
class registered, not the object gives us a hint that we may need some static variables
or members to do this.

I stress that the way I am going to do this may not be the best in all scenarios. I am deeply
suspicious of static variables and members, as static initialisation can be a minefield.
However, I will press on, as the solution serves the purpose of this example and it is up
to the reader to determine whether a solution they use needs to follow different rules
and design.

Firstly we define a method on MyFactory to obtain the singleton instance:
<pre class="prettyprint lang-cpp">MyFactory * MyFactory::Instance()
{
    static MyFactory factory;
    return &amp;factory;
}</pre>
We cannot call the following from the global context:
<pre class="prettyprint lang-cpp">MyFactory::Instance()-&gt;RegisterFactoryFunction(name, classFactoryFunction);</pre>
I have therefore created a Registrar class that will do the call for us in it's constructor:
<pre class="prettyprint lang-cpp">class Registrar {
public:
    Registrar(string className, function&lt;MyBaseClass*(void)&gt; classFactoryFunction);
};
...
Registrar::Registrar(string name, function&lt;MyBaseClass*(void)&gt; classFactoryFunction)
{
    // register the class factory function 
    MyFactory::Instance()-&gt;RegisterFactoryFunction(name, classFactoryFunction);
}</pre>
Once we have this, we can create static instances of this in the source files of the derived
classes as follows (DerivedClassOne):
<pre class="prettyprint lang-cpp">static Registrar registrar(&quot;one&quot;,
[](void) -&gt; MyBaseClass * { return new DervedClassOne();});</pre>
As it turns out, this code can be duplicated in all derived classes so a quick pre processor
define as follows:
<pre class="prettyprint lang-cpp">#define REGISTER_CLASS(NAME, TYPE) \
    static Registrar registrar(NAME, \
        [](void) -&gt; MyBaseClass * { return new TYPE();});</pre>
This uses the new C++ lambda support to declare anonymous functions. We then
only need add the following to each derived class source file:
<pre class="prettyprint lang-cpp">REGISTER_CLASS(&quot;one&quot;, DerivedClassOne);</pre>
<span style="color: #ff0000;">Update 25th January 2013</span>
<h3>We Can Do Better ...</h3>
Although the #define solution provides a neat implementation we could probably do this in a bit more of a C++ style by converting the Registrar class into a template class as follows:
<pre class="prettyprint lang-cpp">template&lt;class T&gt;
class Registrar {
public:
    Registrar(string className)
    {
        // register the class factory function 
        MyFactory::Instance()-&gt;RegisterFactoryFunction(name,
                [](void) -&gt; MyBaseClass * { return new T();});
    }
};</pre>
And now we can replace the use of the macro by
<pre class="prettyprint lang-cpp">static Registrar&lt;DerivedClassOne&gt; registrar(&quot;one&quot;);</pre>
We now have a function registry based factory class defined and the main function can
now be slightly modified as follows:
<pre class="prettyprint lang-cpp">#include &quot;MyFactory.h&quot;

int main(int argc, char** argv)
{
    auto instanceOne = MyFactory::Instance()-&gt;Create(&quot;one&quot;);
    auto instanceTwo = MyFactory::Instance()-&gt;Create(&quot;two&quot;);

    instanceOne-&gt;doSomething();
    instanceTwo-&gt;doSomething();

    return 0;
}</pre>
We can now build and run the project and get the following output:
<pre>I am class one
I am class two</pre>
<h2>References:</h2>
<p>
Factory (software concept) - Wikipedia: <a target="_blank" href="http://http://en.wikipedia.org/wiki/Factory_(software_concept)">http://http://en.wikipedia.org/wiki/Factory_(software_concept)</a>
</p>
<p>
Factory Method Pattern - Wikipedia: <a target="_blank" href="http://http://en.wikipedia.org/wiki/Factory_method_pattern">http://http://en.wikipedia.org/wiki/Factory_method_pattern</a>
</p>
<p>
Abstract Factory Pattern - Wikipedia: <a target="_blank" href="http://http://en.wikipedia.org/wiki/Abstract_factory_pattern">http://http://en.wikipedia.org/wiki/Abstract_factory_pattern</a>
</p>
<p>
C++ 11 - Wikipedia: <a target="_blank" href="http://en.wikipedia.org/wiki/C%2B%2B11#Lambda_functions_and_expressions)">http://en.wikipedia.org/wiki/C%2B%2B11#Lambda_functions_and_expressions)</a>
</p>
<p>
<a href="/data/src/cppObjectFactory.zip">Source Code</a>
</p>]]></contents>

  </post>

</blog>
